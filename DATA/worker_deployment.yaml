apiVersion: apps/v1
kind: Deployment
metadata:
  name: ray-ku-junyoung-workers
  namespace: p-ncai-wbl
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ray-ku-junyoung-worker
  template:
    metadata:
      labels:
        app: ray-ku-junyoung-worker
        ray-cluster: ray-ku-junyoung
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      # hostNetwork 해제 → 기본 CNI 사용
      terminationGracePeriodSeconds: 120

      securityContext:
        # sysctls:
        #   - name: net.ipv6.conf.all.disable_ipv6
        #     value: "1"
        #   - name: net.ipv6.conf.default.disable_ipv6
        #     value: "1"
        runAsNonRoot: true
        runAsUser: 500
        runAsGroup: 500
        fsGroup: 500
        fsGroupChangePolicy: "OnRootMismatch"

      nodeSelector:
        mlx.navercorp.com/zone: h100-i001v8

      # 동일 노드 중복 스케줄 방지(충돌/자원 쏠림 방지)
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["ray-ku-junyoung-worker"]
            topologyKey: "kubernetes.io/hostname"

      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: ray-ku-junyoung-worker

      volumes:
      - name: nlpai-data
        persistentVolumeClaim:
          claimName: nlpai-storage
      - name: dshm
        emptyDir:
          medium: Memory
          sizeLimit: 128Gi

      containers:
      - name: ray-ku-junyoung-worker
        image: sjysjy/ray_serving:0.94
        imagePullPolicy: IfNotPresent

        env:
        - name: MY_POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        - name: RAY_ADDRESS
          value: "ray-ku-junyoung-head-0.ray-ku-junyoung-head.p-ncai-wbl.svc.cluster.local:6379"
        - name: RAY_object_spilling_config
          value: |
            {"type": "filesystem", "params":{"directory_path": "/data/ray_spill"}, "buffer_size": "8Gi"}

        # NCCL/Gloo 네트워킹 설정(IPv4 고정)
        - { name: NCCL_SOCKET_IFNAME, value: "eth0" }
        - { name: GLOO_SOCKET_IFNAME,  value: "eth0" }
        # - { name: NCCL_IB_DISABLE,     value: "1" }   # RDMA 미사용이면 켜는 걸 권장
        - { name: NCCL_DEBUG,          value: "INFO" }
        - { name: NCCL_DEBUG_SUBSYS,   value: "INIT,NET" }
        - { name: TORCH_NCCL_BLOCKING_WAIT, value: "1" }
        - { name: NCCL_ASYNC_ERROR_HANDLING, value: "1" }
        - { name: NCCL_SOCKET_FAMILY,   value: "AF_INET" }
        - { name: GLOO_USE_IPV6,       value: "0" }
        - { name: TP_USE_IPV6,       value: "0" }
        - { name: GLOO_USE_LIBUV,      value: "0" }
        - { name: VLLM_USE_V1,         value: "1" }
        # ---- HF 캐시: 모든 런타임이 PVC 캐시 사용 ----
        - { name: HF_HOME,                value: "/data/data_team/cache/huggingface" }
        - { name: HF_HUB_CACHE,                value: "/data/data_team/cache/huggingface" }
        - { name: TRANSFORMERS_CACHE,     value: "/data/data_team/cache/huggingface/transformers" }
        - { name: HF_DATASETS_CACHE,      value: "/data/data_team/cache/huggingface/datasets" }
        - { name: VLLM_DOWNLOAD_DIR, value: "/data/data_team/cache/huggingface" }
        - { name: HF_HUB_ENABLE_HF_TRANSFER, value: "1" }
        - { name: RAY_BACKEND_LOG_LEVEL, value: "debug" }
        - { name: RAY_TMPDIR,      value: "/data/ray_tmp" }
        - { name: RAY_VERBOSE, value: "1" }

        # - { name: HF_HUB_OFFLINE, value: "1" }
        # - { name: TRANSFORMERS_OFFLINE, value: "1" }

        command: ["/bin/bash", "-lc"]
        args:
        - |
          export RAY_TMPDIR=/data/ray_tmp 
          ray start \
            --address=${RAY_ADDRESS} \
            --node-ip-address=${MY_POD_IP} \
            --temp-dir=/data/ray_tmp \
            --block

        # hostNetwork 해제했으므로 컨테이너 포트 노출 불필요
        volumeMounts:
        - { name: nlpai-data, mountPath: /data }
        - { name: dshm,      mountPath: /dev/shm }

        # 워커가 헤드에 붙는지 확인
        readinessProbe:
          exec:
            command: ["bash","-lc","ray status --address=${RAY_ADDRESS} >/dev/null 2>&1 || exit 1"]
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 15
          failureThreshold: 6

        startupProbe:
          exec:
            command: ["bash","-lc","ray status --address=${RAY_ADDRESS} >/dev/null 2>&1 || exit 1"]
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 15
          failureThreshold: 60


        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash", "-lc", "ray stop || true"]

        resources:
          limits:
            nvidia.com/gpu: 8
            cpu: 16
            memory: 512Gi
          requests:
            nvidia.com/gpu: 8
            cpu: 16
            memory: 512Gi
