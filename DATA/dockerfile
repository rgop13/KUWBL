FROM nvidia/cuda:12.9.1-cudnn-devel-ubuntu22.04

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ENV DEBIAN_FRONTEND=noninteractive

USER root

# ---- OS & RDMA 유저스페이스 ------------------------------------------------
# - rdma-core/ibverbs-providers/librdmacm1: RDMA 사용자 공간 라이브러리/프로바이더
# - infiniband-diags, perftest: RDMA 진단/벤치마크(ibstat, ibv_devinfo, ib_read_bw 등)
# - numactl/pciutils/ethtool/iproute2: 디버깅/튜닝에 유용
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      ca-certificates curl wget git openssh-client sudo vim tzdata locales \
      # RDMA/IB 유저스페이스
      rdma-core libibverbs1 ibverbs-providers librdmacm1 \
      infiniband-diags perftest \
      # 디버깅/네트워킹 유틸
      numactl pciutils ethtool iproute2 net-tools netcat-openbsd dnsutils \
      # Python & 빌드 툴
      python3 python3-pip python3-venv python3-dev \
      build-essential pkg-config cmake ninja-build \
    && rm -rf /var/lib/apt/lists/* \
    && ldconfig

# ---- 로케일/UTF-8 ----------------------------------------------------------
RUN apt-get update && apt-get install -y --no-install-recommends locales \
 && echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
 && echo "ko_KR.UTF-8 UTF-8" >> /etc/locale.gen \
 && locale-gen \
 && update-locale LANG=ko_KR.UTF-8 LC_ALL=ko_KR.UTF-8 \
 && rm -rf /var/lib/apt/lists/*

ENV LANG=ko_KR.UTF-8 \
    LC_ALL=ko_KR.UTF-8 \
    LANGUAGE=ko_KR:ko \
    PYTHONUTF8=1 \
    LESSCHARSET=utf-8 \
    TERM=xterm-256color

# ---- Conda 경로 ----------------------------------------------------------
# conda 경로를 PATH에 추가
ENV PATH="/data/data_team/miniconda3/bin:$PATH"

# 기본 editor를 vim으로 설정(실패해도 빌드 계속)
RUN update-alternatives --set editor /usr/bin/vim.basic || true && \
    printf '%s\n' \
      'set encoding=utf-8' \
      'set fileencodings=utf-8,cp949,euc-kr,latin1' \
      'set termencoding=utf-8' \
      'set helplang=ko' \
      'set fileformats=unix,dos' \
      > /etc/vim/vimrc.local


# ---- 작업 디렉터리 ----------------------------------------------------------
RUN mkdir -p /opt/WBL/DATA/serving
WORKDIR /opt/WBL/DATA/serving

# --- UID/GID 500 사용자 생성 & sudo 권한 ------------------------------------
RUN groupadd -g 500 app || true && \
    id -u 500 >/dev/null 2>&1 || useradd -m -u 500 -g 500 -s /bin/bash app && \
    echo 'app ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/90-app && \
    chmod 0440 /etc/sudoers.d/90-app

USER 500:500
COPY generate /opt/WBL/DATA/generate
COPY serving /opt/WBL/DATA/serving
COPY secret /opt/WBL/DATA/secret
COPY view /opt/WBL/DATA/view
COPY prompt /opt/WBL/DATA/prompt
COPY yaml /opt/WBL/DATA/yaml
COPY gen_test.ipynb /opt/WBL/DATA/gen_test.ipynb

USER root
RUN chown -R 500:500 /opt/WBL/* && chmod -R 775 /opt/WBL/*
USER 500:500

# ---- Hugging Face / Transformers 캐시 경로 ---------------------------------
ENV HF_HOME=/data/data_team/cache/huggingface \
    TRANSFORMERS_CACHE=/data/data_team/cache/huggingface/transformers \
    HF_DATASETS_CACHE=/data/data_team/cache/huggingface/datasets

# ---- NCCL/RDMA & 네트워크 안정화 기본값 ------------------------------------
# ※ K8s에서 파드 env로 쉽게 덮어쓸 수 있도록 "기본값"만 제공합니다.
# RDMA 경로: NCCL_IB_DISABLE=0, TCP fallback: NCCL_SOCKET_* 유지
ENV RDMAV_FORK_SAFE=1 \
    NCCL_IB_DISABLE=0 \
    NCCL_NET_GDR_LEVEL=2 \
    NCCL_ASYNC_ERROR_HANDLING=1 \
    TORCH_NCCL_BLOCKING_WAIT=1 \
    NCCL_SOCKET_FAMILY=AF_INET \
    NCCL_DEBUG=INFO \
    NCCL_DEBUG_SUBSYS=INIT,NET \
    NO_PROXY=localhost,127.0.0.1,.svc,.cluster.local
# (선택) RoCE 환경에서 필요 시 GID index 지정
# ENV NCCL_IB_GID_INDEX=3
# (선택) 특정 HCA를 강제할 때
# ENV NCCL_IB_HCA=mlx5_0,mlx5_1
# (선택) 타임아웃/재시도 튜닝(네트워크 품질에 따라)
# ENV NCCL_IB_TIMEOUT=22 NCCL_IB_RETRY_CNT=7
# (선택) TCP 경로 튜닝(IB 비사용 시)
# ENV NCCL_NSOCKS_PERTHREAD=2 NCCL_SOCKET_NTHREADS=2

# 임시: RDMA 확인 스크립트(원하면 K8s initContainer에서 실행)
# USER root
# RUN echo -e '#!/usr/bin/env bash\nset -e\nibv_devinfo -l || true\nibv_devices || true\n' > /usr/local/bin/check-rdma && \
#     chmod +x /usr/local/bin/check-rdma
# USER 500:500
